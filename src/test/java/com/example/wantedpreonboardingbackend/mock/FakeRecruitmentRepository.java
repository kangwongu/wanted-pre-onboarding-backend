package com.example.wantedpreonboardingbackend.mock;

import com.example.wantedpreonboardingbackend.recruitment.domain.Recruitment;
import com.example.wantedpreonboardingbackend.recruitment.service.port.RecruitmentRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeRecruitmentRepository implements RecruitmentRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Recruitment> data = new ArrayList<>();

    @Override
    public Recruitment save(Recruitment recruitment) {
        if (recruitment.getId() == null || recruitment.getId() == 0) {
            Recruitment newRecruitment = Recruitment.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .company(recruitment.getCompany())
                    .position(recruitment.getPosition())
                    .compensation(recruitment.getCompensation())
                    .contents(recruitment.getContents())
                    .tech(recruitment.getTech())
                    .build();
            data.add(newRecruitment);
            return newRecruitment;
        }
        data.removeIf(d -> Objects.equals(d.getId(), recruitment.getId()));
        data.add(recruitment);
        return recruitment;
    }

    @Override
    public Recruitment getById(long recruitmentId) {
        return data.stream()
                .filter(d -> d.getId().equals(recruitmentId))
                .findAny()
                .orElseThrow(() -> new IllegalStateException("Not Exist Recruitment"));
    }

    public Optional<Recruitment> findById(long recruitmentId) {
        return data.stream()
                .filter(d -> d.getId().equals(recruitmentId))
                .findAny();
    }

    @Override
    public void deleteById(long recruitmentId) {
        data.removeIf(d -> d.getId().equals(recruitmentId));
    }

    @Override
    public List<Recruitment> findAll() {
        return data;
    }

    @Override
    public List<Recruitment> findAllByCompanyId(long companyId) {
        return data.stream()
                .filter(d -> Objects.equals(d.getCompanyId(), companyId))
                .collect(Collectors.toList());
    }
}
